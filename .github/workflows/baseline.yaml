---
# Copyright ¬© 2022-present, Meta Platforms, Inc. and affiliates

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

name: Baseline Tests
on:
  pull_request:
  push:
    branches: [main]

  # Run once a week (see https://crontab.guru)
  schedule:
    - cron: "0 0 * * 0"
jobs:
  tests:
    name: Ensure exploits work as expected against known vulnerable deployment
    runs-on: ubuntu-latest
    # runs-on: macos-latest
    steps:
      - name: Set up git repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      # - name: Install homebrew
      #   uses: homebrew/actions/setup-homebrew@master

      # - name: Install brew dependencies and start colima
      #   run: |
      #     brew install docker docker-compose
      #     brew install --HEAD colima
      #     colima start

      - name: Install chrome
        uses: browser-actions/setup-chrome@latest

      - name: Install mage
        run: go install github.com/magefile/mage@latest

      - name: Compile binary
        run: mage compile "$(uname | python3 -c 'print(open(0).read().lower().strip())')"

      - name: Set git config
        run: |
          git config --global user.name "John Doe"
          git config --global user.email johndoe@example.com

      - name: Clone CALDERA repo
        run: |
          pushd ..
          git clone https://github.com/mitre/caldera.git --recursive caldera-latest
          popd

      - name: Create vulnerable test environment
        run: ./bin/cst-"$(uname | python3 -c 'print(open(0).read().lower().strip())')" TestEnv -v

      - name: Wait until container is running
        run: |
          while [[ -z "$(curl --silent localhost:8888 | grep 'login.js')" ]]; do
            sleep 60s
          done
        shell: bash

      - name: Run security regression test for first XSS
        run: ./bin/cst-"$(uname | python3 -c 'print(open(0).read().lower().strip())')" StoredXSSUno

      - name: Run security regression test for second XSS
        run: ./bin/cst-"$(uname | python3 -c 'print(open(0).read().lower().strip())')" StoredXSSDos

      - name: Destroy test environment
        run: ./bin/cst-"$(uname | python3 -c 'print(open(0).read().lower().strip())')" TestEnv -d

      - name: Report failure
        uses: nashmaniac/create-issue-action@v1.1
        # Only report failures of pushes
        # (PRs failures are visible through the Checks
        # section) to the default branch
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          title: üêõ Tests failed for ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: kind/bug
          body: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
